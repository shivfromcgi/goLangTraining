# ========================================
# Complete Command List for Assignment - 2
# Advanced Go functionality demonstration
# ========================================

# Basic Setup & Module Management
cd "/Users/shivaprasad/Development/Learnings/GoLang/OpenMedia_GoLang_Course/Assignment - 2"
go mod init assignmentTwo
go mod tidy
go get github.com/google/uuid
go get github.com/stretchr/testify

# Testing Commands (Unit Tests)
go test ./... -v
go test ./storage -v
go test ./storage -cover
go test ./storage -coverprofile=coverage.out
go tool cover -html=coverage.out
go test ./storage -run TestSaveData -v
go test ./storage -run TestReadData -v
go test ./storage -short
go test ./storage -race

# Build & Run Commands
go run assignmentTwo.go
go build -o assignmentTwo assignmentTwo.go
go build -o storage-app assignmentTwo.go
GOOS=linux GOARCH=amd64 go build -o assignmentTwo-linux assignmentTwo.go
GOOS=windows GOARCH=amd64 go build -o assignmentTwo.exe assignmentTwo.go
./assignmentTwo
./assignmentTwo &
kill -INT <process_id>

# Logging & Monitoring Commands
go run assignmentTwo.go
go run assignmentTwo.go > app.log 2>&1
go run assignmentTwo.go | jq '.'
go run assignmentTwo.go | tee app.log
go run assignmentTwo.go | jq 'select(.level == "ERROR")'
go run assignmentTwo.go | jq 'select(.level == "INFO")'

# Development & Debug Commands
go fmt ./...
golangci-lint run
go vet ./...
go list ./...
go mod graph
go mod why github.com/google/uuid
go mod why github.com/stretchr/testify
go clean -modcache

# Advanced Testing & Benchmarking
go test ./storage -bench=.
go test ./storage -benchmem
go test ./storage -coverprofile=coverage.out -covermode=count
go tool cover -html=coverage.out -o coverage.html
open coverage.html
go test ./storage -timeout 30s
go test ./storage -count=100

# Signal Handling & Process Management
go run assignmentTwo.go &
ps aux | grep assignmentTwo
kill -INT <process_id>
go run assignmentTwo.go
timeout 10s go run assignmentTwo.go
go run assignmentTwo.go &
sleep 5 && kill -INT $!

# File Operations & Storage Testing
ls -la example.txt
cat example.txt
ls -la *.txt
rm -f example.txt *.log
ls -la example.txt
chmod 644 example.txt

# Continuous Development Commands
find . -name "*.go" | entr -r go test ./storage -v
find . -name "*.go" | entr -r go run assignmentTwo.go
git add .
git commit -m "Implement advanced Go functionality with structured logging"
git push

# Performance & Profiling
go run assignmentTwo.go -cpuprofile=cpu.prof
go run assignmentTwo.go -memprofile=mem.prof
go tool pprof cpu.prof
go tool pprof mem.prof
go run assignmentTwo.go -trace=trace.out
go tool trace trace.out

#  Verification Commands
go run assignmentTwo.go &
PID=$!
sleep 2
kill -INT $PID
wait $PID
go run assignmentTwo.go | jq 'select(.traceID != null)'
go test ./storage && echo "All tests passed"
go build assignmentTwo.go && echo "Build successful"
go fmt ./... && go vet ./... && go test ./... && go build assignmentTwo.go && echo "All checks passed"

# Key Features Demonstrated:
# Structured Logging (log/slog) - JSON formatted logs with levels
# Context & TraceID - UUID-based request tracing throughout the application  
# Modular Design - Separated storage package from main CLI code
# Unit Tests - Comprehensive tests using testify framework
# Signal Handling - Graceful shutdown on Ctrl+C using os/signal